/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.pv168.familytree.gui;

import cz.muni.fi.pv168.familytree.EntityNotFoundException;
import javax.sql.DataSource;
import javax.swing.JFileChooser;

import static cz.muni.fi.pv168.familytree.Main.createMemoryDatabase;
import cz.muni.fi.pv168.familytree.Marriage;
import cz.muni.fi.pv168.familytree.MarriageCatalogImpl;
import cz.muni.fi.pv168.familytree.Pair;
import cz.muni.fi.pv168.familytree.PeopleManagerImpl;
import cz.muni.fi.pv168.familytree.Person;
import cz.muni.fi.pv168.familytree.RelationCatalogImpl;
import cz.muni.fi.pv168.familytree.ServiceFailureException;
import cz.muni.fi.pv168.familytree.xmlparsing.FamilyTreeXML;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Peter
 */
public class FamilyTreeGUI extends javax.swing.JFrame {
    
    final static Logger log =  LoggerFactory.getLogger(FamilyTreeGUI.class);

    private DataSource dataSource;
    private java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("localization");
    private File file;
    
    private List<Person> peopleList;
    private List<Marriage>  marriagesList;
    private List<Pair<Long, Long>> relationsMap;
    
    public DataSource getDataSource() {
        return dataSource;
    }
    
    /**
     * Creates new form FamilyTreeGUI
     */
    public FamilyTreeGUI() {
        initComponents();
        try {
            dataSource = createMemoryDatabase();
        } catch(SQLException | IOException ex) {
            log.error("Failed to create FamilyTreeGUI: ", ex);
        }
        file = null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        peoplePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        peopleTable = new javax.swing.JTable();
        marriagesPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        marriagesTable = new javax.swing.JTable();
        relationsPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        relationsTable = new javax.swing.JTable();
        treePanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newFileMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        openFileMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        saveFileMenuItem = new javax.swing.JMenuItem();
        saveFileAsMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        manageMenu = new javax.swing.JMenu();
        createPersonMenuItem = new javax.swing.JMenuItem();
        updatePersonMenuItem = new javax.swing.JMenuItem();
        deletePersonMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        createMarriageMenuItem = new javax.swing.JMenuItem();
        updateMarriageMenuItem = new javax.swing.JMenuItem();
        deleteMarriageMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        createRelationMenuItem = new javax.swing.JMenuItem();
        deleteRelationMenuItem = new javax.swing.JMenuItem();
        findMenu = new javax.swing.JMenu();
        findPersonMenuItem = new javax.swing.JMenuItem();
        findMarriageMenuItem = new javax.swing.JMenuItem();
        findRelationMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Family Tree App");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        peopleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Gender", "Birth Date", "Birth Place", "Death Date", "Death Place"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(peopleTable);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("localization"); // NOI18N
        if (peopleTable.getColumnModel().getColumnCount() > 0) {
            peopleTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("peopleTableName")); // NOI18N
            peopleTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("peopleTableGender")); // NOI18N
            peopleTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("peopleTableDateOfBirth")); // NOI18N
            peopleTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("peopleTablePlaceOfBirth")); // NOI18N
            peopleTable.getColumnModel().getColumn(4).setHeaderValue(bundle.getString("peopleTableDateOfDeath")); // NOI18N
            peopleTable.getColumnModel().getColumn(5).setHeaderValue(bundle.getString("peopleTablePlaceOfDeath")); // NOI18N
        }

        javax.swing.GroupLayout peoplePanelLayout = new javax.swing.GroupLayout(peoplePanel);
        peoplePanel.setLayout(peoplePanelLayout);
        peoplePanelLayout.setHorizontalGroup(
            peoplePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peoplePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                .addGap(7, 7, 7))
        );
        peoplePanelLayout.setVerticalGroup(
            peoplePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peoplePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("peoplePanel"), peoplePanel); // NOI18N

        marriagesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Spouse 1 Name", "Spouse 2 Name", "From", "To"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(marriagesTable);
        if (marriagesTable.getColumnModel().getColumnCount() > 0) {
            marriagesTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("marriagesTableSpouse1")); // NOI18N
            marriagesTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("marriagesTableSpouse2")); // NOI18N
            marriagesTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("marriagesTableFrom")); // NOI18N
            marriagesTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("marriagesTableTo")); // NOI18N
        }

        javax.swing.GroupLayout marriagesPanelLayout = new javax.swing.GroupLayout(marriagesPanel);
        marriagesPanel.setLayout(marriagesPanelLayout);
        marriagesPanelLayout.setHorizontalGroup(
            marriagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(marriagesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                .addContainerGap())
        );
        marriagesPanelLayout.setVerticalGroup(
            marriagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(marriagesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("marriagesPanel"), marriagesPanel); // NOI18N

        relationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parent Name", "Child Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(relationsTable);
        if (relationsTable.getColumnModel().getColumnCount() > 0) {
            relationsTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("relationsTableParentName")); // NOI18N
            relationsTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("relationsTableChildName")); // NOI18N
        }

        javax.swing.GroupLayout relationsPanelLayout = new javax.swing.GroupLayout(relationsPanel);
        relationsPanel.setLayout(relationsPanelLayout);
        relationsPanelLayout.setHorizontalGroup(
            relationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(relationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                .addContainerGap())
        );
        relationsPanelLayout.setVerticalGroup(
            relationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(relationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("relationsPanel"), relationsPanel); // NOI18N

        jScrollPane4.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
        treePanel.setLayout(treePanelLayout);
        treePanelLayout.setHorizontalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                .addContainerGap())
        );
        treePanelLayout.setVerticalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("treePanel"), treePanel); // NOI18N

        fileMenu.setMnemonic(java.awt.event.KeyEvent.VK_F);
        fileMenu.setText(bundle.getString("fileMenu")); // NOI18N

        newFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFileMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_N);
        newFileMenuItem.setText(bundle.getString("newFileMenuItem")); // NOI18N
        newFileMenuItem.setToolTipText("");
        newFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newFileMenuItem);
        fileMenu.add(jSeparator1);

        openFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFileMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_O);
        openFileMenuItem.setText(bundle.getString("openFileMenuItem")); // NOI18N
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenuItem);
        fileMenu.add(jSeparator2);

        saveFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFileMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_S);
        saveFileMenuItem.setText(bundle.getString("saveFileMenuItem")); // NOI18N
        saveFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveFileMenuItem);

        saveFileAsMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_A);
        saveFileAsMenuItem.setText(bundle.getString("saveFileAsMenuItem")); // NOI18N
        saveFileAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveFileAsMenuItem);
        fileMenu.add(jSeparator3);

        exitMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_E);
        exitMenuItem.setText(bundle.getString("exitMenuItem")); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        manageMenu.setMnemonic(java.awt.event.KeyEvent.VK_M);
        manageMenu.setText(bundle.getString("manageMenu")); // NOI18N

        createPersonMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_P);
        createPersonMenuItem.setText(bundle.getString("createPersonMenuItem")); // NOI18N
        createPersonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPersonMenuItemActionPerformed(evt);
            }
        });
        manageMenu.add(createPersonMenuItem);

        updatePersonMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_U);
        updatePersonMenuItem.setText(bundle.getString("updatePersonMenuItem")); // NOI18N
        updatePersonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePersonMenuItemActionPerformed(evt);
            }
        });
        manageMenu.add(updatePersonMenuItem);

        deletePersonMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_D);
        deletePersonMenuItem.setText(bundle.getString("deletePersonMenuItem")); // NOI18N
        deletePersonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePersonMenuItemActionPerformed(evt);
            }
        });
        manageMenu.add(deletePersonMenuItem);
        manageMenu.add(jSeparator4);

        createMarriageMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_M);
        createMarriageMenuItem.setText(bundle.getString("createMarriageMenuItem")); // NOI18N
        createMarriageMenuItem.setActionCommand(bundle.getString("createMarriageMenuItem")); // NOI18N
        createMarriageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMarriageMenuItemActionPerformed(evt);
            }
        });
        manageMenu.add(createMarriageMenuItem);

        updateMarriageMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_P);
        updateMarriageMenuItem.setText(bundle.getString("updateMarriageMenuItem")); // NOI18N
        updateMarriageMenuItem.setActionCommand(bundle.getString("updateMarriageMenuItem")); // NOI18N
        updateMarriageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMarriageMenuItemActionPerformed(evt);
            }
        });
        manageMenu.add(updateMarriageMenuItem);

        deleteMarriageMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_E);
        deleteMarriageMenuItem.setText(bundle.getString("deleteMarriageMenuItem")); // NOI18N
        deleteMarriageMenuItem.setActionCommand(bundle.getString("deleteMarriageMenuItem")); // NOI18N
        deleteMarriageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMarriageMenuItemActionPerformed(evt);
            }
        });
        manageMenu.add(deleteMarriageMenuItem);
        manageMenu.add(jSeparator5);

        createRelationMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_R);
        createRelationMenuItem.setText(bundle.getString("createRelationMenuItem")); // NOI18N
        createRelationMenuItem.setActionCommand(bundle.getString("createRelationMenuItem")); // NOI18N
        createRelationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRelationMenuItemActionPerformed(evt);
            }
        });
        manageMenu.add(createRelationMenuItem);

        deleteRelationMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_L);
        deleteRelationMenuItem.setText(bundle.getString("deleteRelationMenuItem")); // NOI18N
        deleteRelationMenuItem.setActionCommand(bundle.getString("deleteRelationMenuItem")); // NOI18N
        deleteRelationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRelationMenuItemActionPerformed(evt);
            }
        });
        manageMenu.add(deleteRelationMenuItem);

        menuBar.add(manageMenu);

        findMenu.setMnemonic(java.awt.event.KeyEvent.VK_I);
        findMenu.setText(bundle.getString("findMenu")); // NOI18N

        findPersonMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_P);
        findPersonMenuItem.setText(bundle.getString("findPersonMenuItem")); // NOI18N
        findMenu.add(findPersonMenuItem);

        findMarriageMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_M);
        findMarriageMenuItem.setText(bundle.getString("findMarriageMenuItem")); // NOI18N
        findMenu.add(findMarriageMenuItem);

        findRelationMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_R);
        findRelationMenuItem.setText(bundle.getString("findRelationMenuItem")); // NOI18N
        findMenu.add(findRelationMenuItem);

        menuBar.add(findMenu);

        helpMenu.setMnemonic(java.awt.event.KeyEvent.VK_H);
        helpMenu.setText(bundle.getString("helpMenu")); // NOI18N

        aboutMenuItem.setMnemonic(java.awt.event.KeyEvent.VK_A);
        aboutMenuItem.setText(bundle.getString("aboutMenuItem")); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileMenuItemActionPerformed
        Object[] options = {bundle.getString("yes"),
                            bundle.getString("no"),
                            bundle.getString("cancelButton")};
        int i = JOptionPane.showOptionDialog(this, bundle.getString("fileSave"), bundle.getString("treePanel"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        switch(i) {
            case JOptionPane.YES_OPTION:
                saveFileMenuItemActionPerformed(evt);
            case JOptionPane.NO_OPTION:
                file = null;
                new DeleteDatabaseSwingWorker().execute();
                break;
        }
    }//GEN-LAST:event_newFileMenuItemActionPerformed

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        Object[] options = {bundle.getString("yes"),
                            bundle.getString("no"),
                            bundle.getString("cancelButton")};
        int i = JOptionPane.showOptionDialog(this, bundle.getString("fileSave"), bundle.getString("treePanel"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        switch(i) {
            case JOptionPane.YES_OPTION:
                saveFileMenuItemActionPerformed(evt);
            case JOptionPane.NO_OPTION:
                JFileChooser fc = new JFileChooser();
                int option = fc.showOpenDialog(this);
                if (option == JFileChooser.APPROVE_OPTION) {
                    file = fc.getSelectedFile();
                    updateGuiFromFile();
                }
                break;
        }
    }//GEN-LAST:event_openFileMenuItemActionPerformed

    private void createPersonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPersonMenuItemActionPerformed
        PersonDialog pd = new PersonDialog(this, true, dataSource, null, bundle);
        pd.setVisible(true);
    }//GEN-LAST:event_createPersonMenuItemActionPerformed

    private void saveFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileMenuItemActionPerformed
        if (file != null) {
            saveFileAsMenuItemActionPerformed(evt);
        } else {
            JFileChooser fc = new JFileChooser();
            fc.showSaveDialog(this);
            file = fc.getSelectedFile();
            saveFileAsMenuItemActionPerformed(evt);
        }
    }//GEN-LAST:event_saveFileMenuItemActionPerformed

    private void saveFileAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileAsMenuItemActionPerformed
        new SaveXmlSwingWorker().execute();
        //log
    }//GEN-LAST:event_saveFileAsMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        log.info("Exiting aplication");
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void updatePersonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePersonMenuItemActionPerformed
        if(peopleTable.getSelectedRow() != -1) {
            PersonDialog pd = new PersonDialog(this, true, dataSource, peopleList.get(peopleTable.getSelectedRow()), bundle);
            pd.setVisible(true);
        } else {
            log.warn("No Person selected while updating");
            JOptionPane.showMessageDialog(this, bundle.getString("noPersonSelected"), bundle.getString("warning"), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updatePersonMenuItemActionPerformed

    private void deletePersonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePersonMenuItemActionPerformed
        if(peopleTable.getSelectedRow() != -1) {
            new DeletePersonSwingWorker().execute();
        } else {
            log.warn("No Person selected while deleting");
            JOptionPane.showMessageDialog(this, bundle.getString("noPersonSelected"), bundle.getString("warning"), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deletePersonMenuItemActionPerformed

    private void createMarriageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMarriageMenuItemActionPerformed
        if (peopleList == null || peopleList.size() < 2) {
            JOptionPane.showMessageDialog(this, bundle.getString("notEnoughPeople"), bundle.getString("warning"), JOptionPane.ERROR_MESSAGE);
            log.warn("No enough people while creating marriage");
        } else {
            MarriageDialog md = new MarriageDialog(this, true, dataSource, null, peopleList, bundle);
            md.setTitle(bundle.getString("createPersonMenuItem"));
            md.setVisible(true);
        }
    }//GEN-LAST:event_createMarriageMenuItemActionPerformed

    private void updateMarriageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMarriageMenuItemActionPerformed
        if (marriagesTable.getSelectedRow() != -1) {
            MarriageDialog md = new MarriageDialog(this, true, dataSource, marriagesList.get(marriagesTable.getSelectedRow()), peopleList, bundle);
            md.setTitle(bundle.getString("updatePersonMenuItem"));
            md.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, bundle.getString("noMarriageSelected"), bundle.getString("warning"), JOptionPane.ERROR_MESSAGE);
            log.warn("No marriage selected while updating");
        }
    }//GEN-LAST:event_updateMarriageMenuItemActionPerformed

    private void createRelationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRelationMenuItemActionPerformed
        if (peopleList == null || peopleList.size() < 2) {
            JOptionPane.showMessageDialog(this, bundle.getString("notEnoughPeople"), bundle.getString("warning"), JOptionPane.ERROR_MESSAGE);
            log.warn("No enough people while creating relation");
        } else {
            RelationDialog rd = new RelationDialog(this, true, dataSource, peopleList, bundle);
            rd.setTitle(bundle.getString("createRelationMenuItem"));
            rd.setVisible(true);
        }
    }//GEN-LAST:event_createRelationMenuItemActionPerformed

    private void deleteMarriageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMarriageMenuItemActionPerformed
        if(marriagesTable.getSelectedRow() != -1) {
            new DeleteMarriageSwingWorker().execute();
        } else {
            log.warn("No marriage selected while deleting");
            JOptionPane.showMessageDialog(this, bundle.getString("noMarrigeSelected"), bundle.getString("warning"), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteMarriageMenuItemActionPerformed

    private void deleteRelationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRelationMenuItemActionPerformed
        if(relationsTable.getSelectedRow() != -1) {
            new DeleteRelationSwingWorker().execute();
        } else {
            log.warn("No relation selected while deleting");
            JOptionPane.showMessageDialog(this, bundle.getString("noRelationSelected"), bundle.getString("warning"), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteRelationMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, bundle.getString("treepanel") + " 2016", bundle.getString("treePanel"), JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    protected void updateGUI() {
        new PeopleListSwingWorker().execute();
        new MarriagesListSwingWorker().execute();
        new RelationMapSwingWorker().execute();
    }
    
    private void updateGuiFromFile() {
        //log
        new OpenXmlSwingWorker().execute();
    }
    
    private class PeopleListSwingWorker extends SwingWorker<List<Person>, Void> {
        @Override
        protected List<Person> doInBackground() throws Exception {
            return new PeopleManagerImpl(dataSource).findAllPeople();
        }
        
        @Override
        protected void done() {
            DefaultTableModel model = (DefaultTableModel) peopleTable.getModel();
            for(int i = model.getRowCount() - 1;  i > -1; i--) {
                model.removeRow(i);
            }
            try {
                if(peopleList != null)
                    peopleList.clear();
                peopleList = get();
                for(int i = 0; i < peopleList.size(); i++) {
                    Person p = peopleList.get(i);
                    model.addRow(new Object[]{p.getName(), p.getGender(), p.getDateOfBirth(), p.getPlaceOfBirth(), p.getDateOfDeath(), p.getPlaceOfDeath()});
                }
                log.info("Successfully updated People table.");
            } catch(InterruptedException | ExecutionException ex) {
                log.error("Failed to update People table", ex);
            }
        }
    }
    
    private class MarriagesListSwingWorker extends SwingWorker<List<Marriage>, Void> {
        @Override
        protected List<Marriage> doInBackground() throws Exception {
            return new MarriageCatalogImpl(dataSource, new PeopleManagerImpl(dataSource)).findAllMarriages();
        }
        
        @Override
        protected void done() {
            DefaultTableModel model = (DefaultTableModel) marriagesTable.getModel();
            for(int i = model.getRowCount() - 1;  i > -1; i--) {
                model.removeRow(i);
            }
            try {
                if(marriagesList != null)
                    marriagesList.clear();
                marriagesList = get();
                for(int i = 0; i < marriagesList.size(); i++) {
                    Marriage m = marriagesList.get(i);
                    model.addRow(new Object[]{m.getSpouse1().getName(), m.getSpouse2().getName(), m.getFrom(), m.getTo()});
                }
                log.info("Successfully updated Marriages table.");
            } catch(InterruptedException | ExecutionException ex) {
                log.error("Failed to update Marriages table", ex);
            }
        }
    }
    
    private class RelationMapSwingWorker extends SwingWorker<Map<Person, List<Person>>, Void> {

        @Override
        protected Map<Person, List<Person>> doInBackground() throws Exception {
            return new RelationCatalogImpl(dataSource, new PeopleManagerImpl(dataSource)).findAllRelation();
        }
        
        @Override
        protected void done() {
            DefaultTableModel model = (DefaultTableModel) relationsTable.getModel();
            for(int i = model.getRowCount() - 1;  i > -1; i--) {
                model.removeRow(i);
            }
            try {
                if(relationsMap != null) {
                    relationsMap.clear();
                } else {
                    relationsMap = new ArrayList<>();
                }
                for (Map.Entry<Person, List<Person>> entry : get().entrySet()) {
                    for (Person person : entry.getValue()) {
                        relationsMap.add(new Pair<>(entry.getKey().getId(), person.getId()));
                        model.addRow(new Object[] {entry.getKey().getName(), person.getName()});
                    }
                }
                log.info("Successfully updated Relations table.");
            } catch(InterruptedException | ExecutionException ex) {
                log.error("Failed to update Relations table", ex);
            }
        }
    }
    
    private class DeleteDatabaseSwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            try {
                new PeopleManagerImpl(dataSource).deleteAll();
            } catch (ServiceFailureException ex) {
                log.error("Failed to delete database", ex);
            }
            return null;
        }
        
        @Override
        protected void done() {
            log.info("Database successfully deleted");
            updateGUI();
        }
        
    }
    
    private class DeletePersonSwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            try {
                new PeopleManagerImpl(dataSource).deletePerson(peopleList.get(peopleTable.getSelectedRow()));
            } catch (EntityNotFoundException | ServiceFailureException ex) {
                log.error("Failed to delete Person", ex);
            }
            return null;
        }
        
        @Override
        protected void done() {
            log.info("Person successfully deleted");
            updateGUI();
        }
        
    }
    
    private class DeleteMarriageSwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            try {
                new MarriageCatalogImpl(dataSource, new PeopleManagerImpl(dataSource)).deleteMarriage(marriagesList.get(marriagesTable.getSelectedRow()));
            } catch (EntityNotFoundException | ServiceFailureException ex) {
                log.error("Failed to delete Marriage", ex);
            }
            return null;
        }
        
        @Override
        protected void done() {
            log.info("Marriage successfully deleted");
            updateGUI();
        }
    }
    
    private class DeleteRelationSwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            try {
                Pair<Long, Long> pair = relationsMap.get(relationsTable.getSelectedRow());
                Person parent = new PeopleManagerImpl(dataSource).findPersonById(pair.getL());
                Person child = new PeopleManagerImpl(dataSource).findPersonById(pair.getR());
                new RelationCatalogImpl(dataSource).deleteRelation(parent, child);
            } catch (EntityNotFoundException | ServiceFailureException ex) {
                log.error("Failed to delete Relation", ex);
            }
            return null;
        }
        
        @Override
        protected void done() {
            log.info("Relation successfully deleted");
            updateGUI();
        }
    }
    
    private class SaveXmlSwingWorker extends SwingWorker<Boolean, Void> {

        @Override
        protected Boolean doInBackground() throws Exception {
            return new FamilyTreeXML(file).create(new PeopleManagerImpl(dataSource).findAllPeople(),
                                                    new MarriageCatalogImpl(dataSource, new PeopleManagerImpl(dataSource)).findAllMarriages(),
                                                    new RelationCatalogImpl(dataSource, new PeopleManagerImpl(dataSource)).findAllRelation());
        }
        
        @Override
        protected void done() {
            try {
                if(get()) {
                    JOptionPane.showMessageDialog(null, bundle.getString("fileSaved"), bundle.getString("info"), JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, bundle.getString("fileNotSaved"), bundle.getString("error"), JOptionPane.ERROR_MESSAGE);
                }
            } catch (InterruptedException | ExecutionException ex) {
                //log
            }
        }
    }
    
    private class OpenXmlSwingWorker extends SwingWorker<Boolean, Void> {
        private FamilyTreeXML xml;

        @Override
        protected Boolean doInBackground() throws Exception {
            DeleteDatabaseSwingWorker ddsw = new DeleteDatabaseSwingWorker();
            ddsw.execute();
            while(!ddsw.isDone());
            xml = new FamilyTreeXML(file);
            if (xml.parse()) {
                PeopleManagerImpl manager = new PeopleManagerImpl(dataSource);
                for (Person person : xml.getPeople()) {
                    person.setId(null);
                    manager.createPerson(person);
                }
                MarriageCatalogImpl mCatalog = new MarriageCatalogImpl(dataSource, manager);
                for (Marriage marriage : xml.getMarriages()) {
                    marriage.setId(null);
                    mCatalog.createMarriage(marriage);
                }
                RelationCatalogImpl rCatalog = new RelationCatalogImpl(dataSource, manager);
                for (Map.Entry<Person, List<Person>> entry : xml.getRelations().entrySet()) {
                    for (Person person : entry.getValue()) {
                        rCatalog.makeRelation(entry.getKey(), person);
                    }
                }
                return true;
            } else {
                return false;
            }
        }
        
        @Override
        protected void done() {
            try {
                if(get()) {
                    //done
                    updateGUI();
                } else {
                    //error
                    JOptionPane.showMessageDialog(null, bundle.getString("fileNotOpened"), bundle.getString("error"), JOptionPane.ERROR_MESSAGE);
                }
            } catch (InterruptedException | ExecutionException ex) {
                //log
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FamilyTreeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FamilyTreeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FamilyTreeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FamilyTreeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FamilyTreeGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem createMarriageMenuItem;
    private javax.swing.JMenuItem createPersonMenuItem;
    private javax.swing.JMenuItem createRelationMenuItem;
    private javax.swing.JMenuItem deleteMarriageMenuItem;
    private javax.swing.JMenuItem deletePersonMenuItem;
    private javax.swing.JMenuItem deleteRelationMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem findMarriageMenuItem;
    private javax.swing.JMenu findMenu;
    private javax.swing.JMenuItem findPersonMenuItem;
    private javax.swing.JMenuItem findRelationMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenu manageMenu;
    private javax.swing.JPanel marriagesPanel;
    private javax.swing.JTable marriagesTable;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newFileMenuItem;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JPanel peoplePanel;
    private javax.swing.JTable peopleTable;
    private javax.swing.JPanel relationsPanel;
    private javax.swing.JTable relationsTable;
    private javax.swing.JMenuItem saveFileAsMenuItem;
    private javax.swing.JMenuItem saveFileMenuItem;
    private javax.swing.JPanel treePanel;
    private javax.swing.JMenuItem updateMarriageMenuItem;
    private javax.swing.JMenuItem updatePersonMenuItem;
    // End of variables declaration//GEN-END:variables
}
